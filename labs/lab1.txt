Лабораторная работа №1 «Первоначальная настройка git»
Тема: Первоначальная настройка git. Инициализация каталога. Состояния
фалов в git. Первый коммит.
Цель работы: провести первоначальную настройку системы контроля
версии git, после установки инициализировать каталог для работы, разобраться с
существующими состояниями файлов в git, сделать первый коммит.
В состав git'а входит утилита git config, которая позволяет просматривать и
устанавливать параметры, контролирующие все аспекты работы git'а и его внешний
вид.
Первое, что необходимо сделать после установки git'а, — указать имя и адрес
электронной почты. Это важно, потому что каждый коммит в git'е содержит эту
информацию, и она включена в коммиты, передаваемые разработчиками, и не может
быть далее изменена.
Для того чтобы начать использовать git для существующего проекта,
необходимо перейти в проектный каталог и в командной строке ввести git init.
Эта команда создаёт в текущем каталоге новый подкаталог с именем .git
содержащий все необходимые файлы репозитория — основу git-репозитория. На
этом этапе проект ещё не находится под версионным контролем. Данная команда
инициализирует возможность работы с git, но не вносит файлы под контроль.
Порядок выполнения работы
1. Изучить теоретическую часть работы.
2. Зайти в папку D://{Номер группы} и в ней создать
папку соответствующую инициалам студента на английском языке.
Например, для студента Иванов Петр Петрович, папка будет иметь имя IPP.
3. Провести инициализацию репозитория в созданной папке. Для этого,
открыть программу Git Bash, перейти в созданную папку (для перемещения
используется команда cd D://{Номер группы}/{Инициалы}).
4. Установить настройки имени и e-mail’а, не используя опцию --global.
5. Создать в папке файл my_first_file.txt и проиндексировать его.
6. Сделать первый коммит.
7. Открыть файл my_first_file.txt и добавить в него строку “test row”.
Проиндексировать изменения.
8. Создать новый файл my_second_file.txt. Проиндексировать изменения.
9. Сделать второй коммит.
10. Продемонстрировать преподавателю ход работы, ответить на
уточняющие вопросы.
Распределенная система управления версиями Git
Система управления версиями (СУВ) Git позволяет контролировать
изменения файлов в выбранных папках на своем компьютере и согласовывать
эти изменения с изменениями файлов на компьютерах членов команды,
совместно работающих над каким-либо проектом. Возможно согласование
изменений с хранилищем файлов проекта (репозиторием) на выделенном
сервере, в том числе на серверах общедоступных сервисов https://github.com и
https://bitbucket.org.
После загрузки программного обеспечения Git с сервера https://git-scm.com
и его установки на компьютере в списке установленных программ появляется
папка Git с ссылками на приложения Git Bash, Git CMD и Git GUI. Git Bash –
интерпретатор командной строки bash ОС UNIX/Linux перенесенный в
Windows и интегрированный с Git. Интеграция с Git позволяет интерпретатору
выполнить команды Git из любой текущей папки и хранить все настройки
программы для использования при последующих вызовах. Git CMD –
интерпретатор cmd командной строки Windows, также понимающий команды
Git. Для выполнения команд Git в окне Git CMD необходимо командой cd
сделать текущей папкой папку с контролируемыми файлами.
Git GUI – графический интерфейс пользователя программы Git. С его
помощью можно выполнить основные операции Git по управлению файлами
проекта в локальном и удаленном (remote) репозиториях без необходимости
знания синтаксиса команд Git. Однако в некоторых случаях его возможностей
оказывается недостаточно для более сложных случаев совместной работы над
проектами.
После установки Git на компьютере в контекстном меню правой кнопки
мыши появляются команды запуска Git Bash Here и Git GUI Here, позволяющие
запустить интерпретатор команд и графическую оболочку с привязкой к
открытой папке с контролируемыми файлами проекта или папке, которую
нужно сделать рабочей папкой проекта.
Настройка Git
1. Откройте папку, содержащую файлы проекта одной из ранее выполненных
лабораторных работ. Из контекстного меню правой кнопки мыши
выберите Git Bash Here и в открывшемся окне введите команду:
$ git init
В результате в папке с проектом появится папка с именем «.git» ,
содержащая все необходимые файлы локального репозитория.
2. Авторизуйтесь для внесения последующих изменений, указав свое имя и
адрес электронной почты, например :
$ git config user.name "Максим Лунин"
$ git config user.email max.lunin@mail.ru
Если вы собираетесь постоянно работать с проектами на данном
компьютере, то добавьте к командам авторизации ключ global:
$ git config --global user.name "Сергей Васин"
$ git config --global user.email serge_vasin@yandex.ru
3. Создайте в папке с проектом файл «.gitignore» для постоянного
исключения из числа файлов с отслеживаемыми изменениями временные и
автоматически создаваемые файлы компиляторов и компоновщиков. При
создании файла с именем «.gitignore» средствами контекстного меню
мыши возможен отказ системы Windows сохранить файл без указания
имени перед точкой. В этом случае сохраните его с произвольным именем,
например, «a.gitignore», а затем в командной строке cmd Windows и Git
CMD переименуйте его командой ren или в Git Bash командой mv,
предварительно сделав папку с файлом текущей:
>ren a.gitignore .gitignore (для cmd Windows, Git CMD)
$ mv a.gitignore .gitignore (для Git Bash)
Создайте в файле «.gitignore» список файлов и папок, отслеживать которые
не нужно, например:
*obj
Win32/
Debug/
Символ «*» в указании имени заменяет произвольное количество
символов, а символ «/» после имени обозначает папку.
4. Добавление имен удаленных репозиториев.
При совместной работе над проектом нескольких разработчиков вначале
необходимо получить файлы текущей версии проекта из удаленного
репозитория. Для этого необходимо знать краткое имя репозитория на
удаленном сервере или его URL-адрес. Знания краткого имени будет
достаточно, если файлы в рабочую папку уже копировались с сервера
командой git clone. Пример команды git clone:
$ git clone https://github.com/имя_владельца/имя_папки_проекта .
При этом по умолчанию удаленному репозиторию присваивается имя
«origin». Проверить присвоенные имена серверов можно командой git
remote :
$ git remote –v .
Ключ –v позволяет вывести полные URL-адреса серверов:
origin https://github.com/имя_владельца/имя_папки (fetch)
origin https://github.com/имя_владельца/имя_папки (push)
В скобках указаны команды скачивания (fetch) и отправки изменений
(push) допустимые для этого сервера.
Добавить еще одно имя сервера с удаленным репозиторием можно
командой git remote add :
$ git remote add краткое_имя_сервера URL-репозитория .
Добавление имени сервера имеет смыл только после регистрации своего
аккаунта на соответствующем сайте или после получения URL-адреса от
руководителя разработки проекта.
Команда git clone настраивает ваш локальный репозиторий на слежение за
удаленным репозиторием. Скачать все изменения файлов удаленного
репозитория с момента последней сверки можно командой git pull:
$ git pull краткое_имя_сервера
Создание собственного репозитория на сайте github.com
Для создания собственного удаленного репозитория на веб-сервисе
Microsoft github.com необходимо:
- Зайти нас сайт github.com и зарегистрироваться, указав имя (логин), e-
mail и пароль для входа.
- Подтвердить регистрацию по ссылке в письме, пришедшем на указанный
при регистрации е-mail адрес.
- Войти в свой аккаунт на github.com и щелчком на кнопке «New» создать
новый репозиторий, указав его имя, например, MyRepo.
- В командном окне Git Bash задать краткое имя, обозначающее
удаленный репозиторий на github и его URL, например:
$ git remote add КраткоеИмя http://github.com/Логин/MyRepo
(В качестве краткого имени по умолчанию выбирается имя origin.)
- Скопировать содержимое ранее созданного локального репозитория в
удаленный репозитория командой push с указанием имени ветки (master)
$ git push КраткоеИмя -u master
Ключ -u сохранит связь с удаленным репозиторием позволит в дальней-
шем отслеживать изменения и копировать измененные и добавленные
файлы командами git pull и git push без указания имени репозитория и
имени ветки.
Для доступа к удаленному репозиторию по запросу сервера придется
ввести ваш логин и пароль. Следите за регистром ввода пароля!
- Внесите изменения или добавьте файл в удаленный репозиторий
непосредственно на сервере github.com. Затем скопируйте эти изменения
командой git pull в папку локального репозитория.
- Удалить репозиторий на github можно на его странице из меню "Settings"
(значок «шестеренка») в блоке «Danger Zone» нажатием на кнопку «Delete
this repository». При этом потребуется ввести имя репозитория и пароль
владельца